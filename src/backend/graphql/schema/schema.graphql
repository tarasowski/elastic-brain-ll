type AllCourses {
	items: [CourseList]
	nextToken: String
}

type CourseList {
	courses: [SingleCourse]
}

type Mutation {
	addNewCourse(courseName: String!, courseId: String!): MyCourseList
	addNewCard(input: CardInfo): CardView
}



input CardInfo {
	cardId: String!
	question: String!
	answer: String!
	dateAdded: String!
	courseId: String!
}


type MyCourseList {
	userId: String!
	courses: [SingleCourse]
}

type Query {
	getAllCourses: AllCourses
	getSpecificCourseCards(courseId: String!): SpecificCourseCards
	getAllCards: AllCards
}

type AllCards {
	items: [CardView]
	nextToken: String
}

type SpecificCourseCards {
	items: [CardView]
	nextToken: String
}

type CardView {
	userId: String!
	userId_courseId_cardId: String!
	question: String!
	answer: String!
	courseId: String!
	dateAdded: String!
}

type SingleCourse {
	courseName: String!
	courseId: String!
}

schema {
	query: Query
	mutation: Mutation
}